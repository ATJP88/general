pipeline {
    agent any

    environment {
        PROJECT_ID = "hsbc-12514600-fdscshk-dev"
        CLUSTER_NAME = "fdscs-cluster"
        CLUSTER_ZONE = "asia-east2"
        NAMESPACE = "fdscs-dev"
        CONTAINER_REGISTRY = "asia-docker.pkg.dev/hsbc-12514688-fdscshk-dev/fdscs"
        GCS_KEY_FILE_PATH = "/root/.ssh/terraformcreds/gce-stage3-image-builder.json"
        SERVICE_ACCOUNT = "gce-stage3-image-builder@hsbc-12514600-fdscshk-dev.iam.gserviceaccount.com"
        HTTP_PROXY = "http://10.91.23.31:3128"
        HTTPS_PROXY = "http://10.91.23.31:3128"
    }

    stages {
        stage('Authenticate, Set Proxies, Get GKE Credentials, and Update Kubernetes Deployments') {
            steps {
                script {
                    echo 'Executing all steps in a single stage...'
                    sh '''
                        # Set Load Balancer Proxies
                        export HTTP_PROXY=${HTTP_PROXY}
                        export HTTPS_PROXY=${HTTPS_PROXY}

                        # GCP Authentication
                        gcloud config unset auth/impersonate_service_account
                        gsutil cp gs://hsbc-12514600-fdscshk-dev-key-management/gce-stage3-image-builder/gce-stage3-image-builder.json ${GCS_KEY_FILE_PATH}
                        gcloud auth activate-service-account ${SERVICE_ACCOUNT} --key-file=${GCS_KEY_FILE_PATH}

                        # Get GKE Credentials
                        rm -rf /root/.kube
                        gcloud config set project ${PROJECT_ID}
                        gcloud container clusters get-credentials ${CLUSTER_NAME} --zone ${CLUSTER_ZONE} --project ${PROJECT_ID}
                        kubectl config set-context --current --namespace=${NAMESPACE}

                        # Read deploy images file and update Kubernetes deployments
                        if [ ! -f /tmp/deploy_images.txt ]; then
                            echo "No images to deploy. Exiting."
                            exit 1
                        fi

                        while read -r line; do
                            API_NAME=$(echo $line | awk '{print $1}')
                            IMAGE_TAG=$(echo $line | awk '{print $2}')

                            echo "Updating Kubernetes deployment for $API_NAME to use image $CONTAINER_REGISTRY/$API_NAME:$IMAGE_TAG"

                            if [ "$API_NAME" == "aggregate-api" ]; then
                                kubectl set image deployment/deployment-aggregate-api aggregate-api=$CONTAINER_REGISTRY/$API_NAME:$IMAGE_TAG
                                echo "deployment.apps/deployment-aggregate-api image updated"
                            elif [ "$API_NAME" == "filenet-api" ]; then
                                for i in {1..5}; do
                                    kubectl set image deployment/deployment-filenet-api-$i filenet-api-$i=$CONTAINER_REGISTRY/$API_NAME:$IMAGE_TAG
                                    echo "deployment.apps/deployment-filenet-api-$i image updated"
                                done
                            elif [ "$API_NAME" == "arc-api" ]; then
                                kubectl set image deployment/deployment-arc-api arc-api=$CONTAINER_REGISTRY/$API_NAME:$IMAGE_TAG
                                echo "deployment.apps/deployment-arc-api image updated"
                            elif [ "$API_NAME" == "UI" ]; then
                                                               kubectl set image deployment/deployment-seekerui seekerui=$CONTAINER_REGISTRY/seekerui:v1.$BUILD_NUMBER
                                echo "deployment.apps/deployment-seekerui image updated"
                            else
                                echo "Unknown API NAME: $API_NAME, Skipping."
                            fi
                        done < /tmp/deploy_images.txt
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'All Kubernetes deployments updated successfully.'
        }
        failure {
            echo 'Deployment failed.'
        }
    }
}




# Name: SPRING PROFILE
# Value: sit

name: spring_profiles_active
value: dev

name: spring_datasource_username
valueFrom:
  secretKeyRef:
    name: arc-datasource-credentials
    key: spring_datasource_username

name: spring_datasource_password
valueFrom:
  secretKeyRef:
    name: arc-datasource-credentials
    key: spring_datasource_password

name: arc_user_id
valueFrom:
  secretKeyRef:
    name: arc-credentials
    key: arc_user_id

name: arc_pwd
valueFrom:
  secretKeyRef:
    name: arc-credentials
    key: arc_pwd
