name: "CI Workflow for Microservices"

on:
  push:
    branches:
      - main
      - feature/*
      - release/*
      - chore/*
      - feat/*
  workflow_dispatch:

env:  # non-sensitive repo configs
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION }}
  REPO_NAME: ${{ vars.GCP_REPO_NAME }}

jobs:
  sqscan:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ matrix.service }}
            -Dsonar.projectName=${{ matrix.service }}
            -Dsonar.sources=./${{ matrix.service }}          
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    strategy:
      matrix:
        service: 
          - adservice
          - cartservice
          - checkoutservice
          - currencyservice
          - emailservice
          - frontend
          - loadgenerator
          - paymentservice
          - productcatalogservice
          - recommendationservice
          - shippingservice

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v0.4.0
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.GCP_WI_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - name: Login to Artifact Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Get short commit ID
        id: get-tag
        run: echo "commit_id=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build and Push ${{ matrix.service }}
        run: |
          IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ matrix.service }}:${{ env.commit_id }}

          echo "ðŸš€ Building $IMAGE_URI"
          docker build -t $IMAGE_URI ./${{ matrix.service }}
          docker push $IMAGE_URI

          # Update deployment manifest for this service
          sed -i "s|image: .*|image: $IMAGE_URI|" ./k8s/${{ matrix.service }}.yaml
